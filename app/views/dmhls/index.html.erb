<%= stylesheet_link_tag "dmhls" %>
<div style="margin-left: 30px ;width: 500px;">
  <h1 style=" font-weight: bold;">
    DMHLS
  </h1>
  <h3 style="font-weight: bold;">
    Direct-Mapping High-Level Synthesis
  </h3>
  <hr/>
  <p>
    <em>High Level Synthesis</em> (HLS) has been a research topic for some three decades. Since late 1980s,
    there has been continuous effort for automating the process of RTL design by generating the
    HDL code such as Verilog HDL and VHDL automatically. Previously, HLS focused on how to optimize the
    resource usage and/or the delay for the whole work, and tread it as an optimization problem.
    Thus, some mathematical optimization models were proposed to solve the HLS problem. The earliest one of
    these models might be the <em><a href="http://www.cs.tufts.edu/~soha/cadathlon03/refs/ILP_SCHED_Hwang_TCAD91.pdf">
    Integer Linear Programming</a></em> (ILP) model, which is able to get the
    optimal solution subject to delay constraints or resource constraints. However, the ILP model is very slow
    to get solution.
    <a href="http://cadlab.cs.ucla.edu/~cong/papers/28.1-cong.pdf">SDC (System of Difference Constraints) </a>
    is another model used to solve this optimization problem,
    which is faster than ILP model, but still much slower than the software compiler.
  </p>
  <p>
    <em>Direct-Mapping High-Level Synthesis</em> (DMHLS)
    is an novel framework for <em>High Level Synthesis</em>,
    which is fast, aiming to be competitive with software compiler for microprocessors.
    Rather than formulating HLS as mainly an optimization problem, DMHLS considers direct mapping in the first place,
    trying to eable accurate and clear architecture descriptions through high level languages such as C programming
    language,
    without automated resource sharing and loop optimizations that changes the architecture too much or
    "obscures the architecture"<a href="http://csg.csail.mit.edu/6.S078/6_S078_2012_www/resources/bsv_by_example.pdf">(
    BSV by Example, p12)</a>.
    DMHLS starts from <a href="http://llvm.org/">LLVM </a>Intermediate Representations (LLVM IR)
    and generate Verilog HDL codes. LLVM IR is a typical
    <a href="https://en.wikipedia.org/wiki/Static_single_assignment_form">Static-Single Assignment (SSA)</a>
    form of intermediate representation. Although DMHLS only supports LLVM IR currently,
    the techniques underneath the framework should
    works fine for any SSA form of intermediate representations</p>

  <!--
  <h4>
    Structural Recursion
  </h4>
  <p>
    Almost all programming languages supported
    <em><a href="https://en.wikipedia.org/wiki/Recursion_(computer_science)">recursion</a></em>.


  </p>
  -->
  <p>
    <!--<a href="https://github.com/li3939108/dmhls/archive/master.zip">Download</a><br/>-->
    <a href="https://github.com/li3939108/dmhls">Github Repository</a>
  </p>
  <hr/>
  <p style="text-align: right;">
    Feb 2017<br/>
    Chaofan Li
  </p>
</div>
