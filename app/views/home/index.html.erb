<div class="topbar">
	<div class="global-nav">
		<div class="container">
			<div class="topbar-left" style="display: inline-block">
				<ul class="nav">
					<% @top_nav_lists.values.each do |list| %>
					<li class="top-list top-list-<%= list[:href][1..-1] %> <%= "active" if list[:text] == @init_active %>">
						<a class="top-nav top-nav-left" href="<%= list[:href] %>">
							<span class="icon icon-left <%= list[:icon].split('-')[0] %> <%= list[:icon] %>"></span>
							<span class="text"><%= list[:text] %></span>
						</a>
					</li>
					<% end %>
				</ul>
			</div>
			<div class="topbar-right" style="display: inline-block">
				<ul class="nav">
					<li class="top-list">
						<a class="top-nav top-nav-right" title="View me on Linkedin" href="http://www.linkedin.com/in/chaofanli/">
							<span class="icon icon-right fa fa-linkedin-square"></span>
						</a>
					</li><!--
					<li class="top-list">
						<a class="top-nav top-nav-right" title="View my Github repos" href="https://github.com/li3939108?tab=repositories">
							<span class="icon icon-right fa fa-github"></span>
						</a>
					</li>
					-->
				</ul>
			</div>
		</div>
	</div>
</div>
<div class="content" id="<%= @top_nav_lists['home'][:href][1..-1] %>">
	<div class="container panel">
		<h1><%= @name %></h1>
		<hr />
		<p>
		PhD student<br />
		<%= link_to("Computer Engineering & Systems Group", @cesg_site) %><br />
		<%= link_to("Department of Electrical and Computer Engineering", @ece_site) %><br />
		<%= link_to("Texas A&M University", @tamu_site) %><br />
		College Station, TX
		</p>
	</div>
	<div class="container panel" id="<%= @top_nav_lists['about'][:href][1..-1] %>">
		<h3><%= @anchor_text.call('about') %></h3>
		<p>I am a Ph.D. student majoring <%= link_to("Computer Engineering", @cesg_site) %> at TAMU, advised by Prof. <a href="http://cesg.tamu.edu/faculty/Jiang-Hu/">Jiang Hu</a>. Before I came to TAMU, I received my B.S. degree in Electronic &amp; Information Science in 2013 from <%= content_tag(:em, link_to("School of Electronic Science and Engineering", @ese_nju_site) ) %>, <%= content_tag(:em, link_to("Nanjing University", @nju_site) )  %>, at Nanjing, P.R.China.</p>
	</div>
	

	<div class="container panel" id="<%= @top_nav_lists['publications'][:href][1..-1] %>">
	<h3><%= @anchor_text.call('publications') %></h3>
	<ol class="publication-list">
	<li>Chaofan Li, Wei Luo, Sachin S. Sapatnekar and Jiang Hu. "<%= link_to('Joint precision optimization and high level synthesis for approximate computing', "http://people.tamu.edu/~li3939108/LiDAC15a.pdf", {'class' => 'content-link file-link'}) %>". <em>ACM/IEEE Design Automation Conference (DAC)</em>, June 2015. [<%= link_to('slides', 'http://people.tamu.edu/~li3939108/LiDAC15a_slides.pdf', {'class' => 'content-link file-link'}) %>] </li>
	</ol>
	</div>
	<div class="container panel" id="<%= @top_nav_lists['tools'][:href][1..-1] %>">
		<h3><%= @anchor_text.call('tools') %></h3>
		Something I think might be useful.
		
	
		<h4>A Regular Graph Generator</h4>
		<p>(This is part of the course project for CPSC 629 by Prof. <a href="http://faculty.cs.tamu.edu/chen/">Jianer Chen</a>)</p>
		<p>A program I designed (or someone has designed before but I don't know) and implemented to generate random (I don't know if it is uniformly random) graphs with exactly the same degree for every vertex (i.e., regular graph). </p><p>Simply selecting random pairs of vertices isn't necessarily generating a graph with all vertices having the same degree. One common model called <em> pairing model</em> is to recursively select a random pair of vertices with degree less than what we want (suppose it is r), which will possibly generates either a multigraph, which is not simple, or a graph containing several r-regular subgraphs and several other complete subgraphs, which is not r-regular. However, the algorithm below certainly will generate a regular graph, if such a graph exists for a given number of vertices and a given degree for each vertex. </p> 
<!--
		<pre class="pseudo">
<strong>procedure</strong> gen (<em>D</em>, <em>V</em>) <%= cmt("D is the degree, V is number of vertices") %>
	<strong>for</strong> <em>i</em> from <em>0</em> to <em>D</em> <strong>do</strong> <%= cmt("Create D + 1 empty sets, to store vertices with corresponding degree") %>
		sets[<em>i</em>] ← [ ]
	<strong>end</strong>
	<strong>for</strong> <em>i</em> from <em>0</em> to <em>|V| - 1</em> <strong>do</strong> <%= cmt("Create |V| 0-degree vertices and store them in sets[0]") %>
		sets[<em>0</em>][<em>i</em>] ← new_vertex(<em>i + 1</em>) <%= cmt("label of vertex starting from 1") %>
	<strong>end</strong>
	<strong>while</strong> length(sets[<em>D</em>]) <%= "<" %> <em>|V| - 1</em> <strong>do</strong> <%= cmt("There are still vertices that can be connected to get more degrees") %>
		v1 ← pop( random_vertex( sets[<em>0</em> to <em>D-1</em>] ) ) <%= cmt("Extract a random vertex which is not in sets[D]") %>
		l ← D − degree(v1) <%= cmt("v1 needs l more degrees") %>
		<strong>for</strong> <em>i</em> from <em>1</em> to <em>l</em> <strong>do</strong>
			v2 ← pop( random min-degree vertex ) 
			<%= cmt("Extract a random vertex with minimal degree and not connected with v1") %>
			connect(v1, v2) <%= cmt("Degree of v2 increase by 1, update the adjacency list of v1 and v2") %>
			add( v2, sets[ degree(v2) ]) 
		<strong>end</strong>
		add(v1, sets[ <em>D</em> ])
	<strong>end</strong>
	<strong>return</strong> Graph( sets[<em>D</em>]) <%= cmt("sets[D] will be an adjacency list, create a graph with it") %>
<strong>end</strong>
		</pre>
-->
		<p>
<table style="width: 200px;">
	<tr>
<td><%= link_to('Introduction.pdf', "http://people.tamu.edu/~li3939108/Introduction.pdf", {'class' => 'content-link file-link'}) %></td>
	</tr>
	<tr>
<td>Implementations</td>
	</tr>
<tr>
  <td>Python</td>
  <td><%= link_to('graph.py', "https://raw.githubusercontent.com/li3939108/max_bandwidth/master/graph.py", {'class' => 'content-link file-link'}) %></td>
</tr>
<tr>
  <td>C</td>
  <td>
<%= link_to('graph.h', "https://raw.githubusercontent.com/li3939108/Partitioning/master/graph.h", {'class' => 'content-link file-link'}) %>&nbsp;<%= link_to('graph.c', "https://raw.githubusercontent.com/li3939108/Partitioning/master/graph.c", {'class' => 'content-link file-link'}) %>
	</td>
</tr>
</table>
	<h4>A Ruby interface for Integer Linear Programming</h4>
	<p>Implemented in C as an extension of ruby, this tool enables ruby to solve the Integer Linear Programming (ILP) problem with LP solvers CPLEX, Gurobi and lp_solve. If you want, I think it is very simple to tune it to solve LP problems :)</p>
	<table style="width: 200px;">
<tr>
  <td><%= link_to('ilpext.zip', "https://github.com/li3939108/ilpext/archive/master.zip", {'class' => 'content-link file-link'}) %></td>
</tr>
</table>
	<h4>A Survey of Quantum Information written in Chinese</h4>
		<p>(This is my undergraduate thesis)</p>
		<table style="width: 200px;">
		<tr>
		  <td><%= link_to('Thesis', "http://people.tamu.edu/~li3939108/undergrad_thesis.pdf", {'class' => 'content-link file-link'}) %></td>
		</tr>
		</table>
	</div>

	<div class="container panel" id="<%= @top_nav_lists['contacts'][:href][1..-1] %>">
		<h3><%= @anchor_text.call('contacts') %></h3>
		<ul class="vertical">
		<% @contacts.each do |list| %>
			<li>
				<span class="first-column" ><% case list[:name] when "Office"%><%= content_tag('span', '', {:class => "contact-icon icon-link #{list[:icon].split('-')[0]} #{list[:icon]}", :id => "map-button", :title => "#{list[:title]}"}) %><%	else %><%= content_tag('span', '', {:class => "contact-icon #{list[:icon].split('-')[0]} #{list[:icon]}"}) %><%end %>&nbsp;&nbsp;&nbsp;<%=  list[:name] %></span><span class="second-column" style="<%="height:"+(list[:lines]*18).to_s + "px;" if list[:lines] != nil %>"><%= list[:content] %></span>
			</li>
		<% end %>
		</ul>
	</div>
	<div class="foot">
		Last updated at <span class="last-modify"><%= @last_modify_date %></span> · <a class="text-link" href="https://github.com/li3939108/personal_page">Github project for this site</a><br />
		<a title="Check the html5 validation of this site" href="http://validator.w3.org/check/referer"><span class=" fa fa-html5"></span></a>&nbsp;<a title="Check the CSS3 validation of this site" href="http://jigsaw.w3.org/css-validator/check/referer"><span class=" fa fa-css3"></span></a>
	</div>
</div>
